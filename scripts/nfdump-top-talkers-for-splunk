#!/usr/bin/env python
# pynfdump-top-talkers-for-splunk
# Copyright (C) 2009 Justin Azoff JAzoff@uamail.albany.edu
#
# This module is released under the MIT License:
# http://www.opensource.org/licenses/mit-license.php

from dateutil.parser import parse
import pynfdump
import cymruwhois

class default:
    pass
default_owner = default()
default_owner.owner=""

default_output_fields = ['rank', 'flows', 'packets', 'bytes','pps', 'bpp', 'bps']

def fmt_dict(d, keys):
    return ' '.join('%s="%s"' % (k,d[k]) for k in keys)

def show_top(data_dir, remote_host, profile, sources, start_date=None, end_date=None, stat='ip/bytes', number=5, query=''):
    if start_date is None:
        start_date = parse("")
    d=pynfdump.Dumper(data_dir, profile, sources, remote_host)
    d.set_where(start_date, end_date)

    s, so = stat.split("/")

    if 'as' in stat:
        output_fields = ['date', s, "owner"] + default_output_fields
    else:
        output_fields = ['date', s] + default_output_fields

    records=list(d.search(query,statistics=s,statistics_order=so, limit=number))

    if 'as' in stat:
        c=cymruwhois.Client(memcache_host="lois:11211")
        owners = c.lookupmany_dict(["AS%s" % rec['srcas'] for rec in records])
        for rec in records:
            owner = owners.get("AS%d" % rec['srcas'], default_owner)
            rec['owner'] = owner.owner

        

    for idx,rec in enumerate(records):
        rec['rank'] = idx+1
        rec['date'] = start_date
        print fmt_dict(rec, output_fields)
            
def main():
    import sys
    from optparse import OptionParser
    parser = OptionParser()
    parser.add_option("-s", "--startdate", dest="start_date", action="store", help="start date")
    parser.add_option("-e", "--enddate",   dest="end_date",   action="store", help="end date")
    parser.add_option("-d", "--datadir",   dest="dir",        action="store", help="data directory")
    parser.add_option("-r", "--remote",    dest="remote",     action="store", help="remote host")
    parser.add_option("-p", "--profile",   dest="profile",    action="store", help="profile", default="live")
    parser.add_option("-o", "--source",    dest="sources",    action="append", help="source")
    parser.add_option("-n", "--number",    dest="number",     action="store", help="number of top talkers", default=5)
    parser.add_option("-q", "--query",     dest="query",      action="store", help="query", default="")
    parser.add_option('',"--stat",         dest="stat",       action="store", help="statistic", default="ip/bytes")

    (options, args) = parser.parse_args()

    if not (options.dir and options.sources):
        sys.stderr.write("Specify a datadir and a source\n")
        parser.print_help()
        sys.exit(1)

    if 1:
        pass

    o = options
    show_top(o.dir, o.remote, o.profile, o.sources, o.start_date, o.end_date, o.stat, o.number, o.query)

if __name__ == "__main__":
    main()
